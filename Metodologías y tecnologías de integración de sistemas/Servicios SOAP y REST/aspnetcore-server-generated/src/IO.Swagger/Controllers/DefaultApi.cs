/*
 * API Edificio Inteligente
 *
 * API para la gesti√≥n de salas, niveles, dispositivos y notificaciones en un edificio inteligente.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using MySql.Data.MySqlClient;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using static Mysqlx.Notice.Warning.Types;
using System.Net.Mail;
using System.Net;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    {
        private static List<Dispositivo> dispositivos = new List<Dispositivo>();
        private static List<Nivel> niveles = new List<Nivel>();
        private static List<Sala> salas = new List<Sala>();
        private readonly string connectionString = "Server=localhost;Port=3307;Database=mtis;User=root;Password=root;";

        [HttpDelete("/api/dispositivos/{codigo}")]
        [SwaggerOperation("BorrarDispositivo")]
        public IActionResult BorrarDispositivo(int codigo)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("DELETE FROM dispositivo WHERE codigo = @codigo", connection);
            cmd.Parameters.AddWithValue("@codigo", codigo);
            int rows = cmd.ExecuteNonQuery();

            connection.Close();
            return rows > 0 ? NoContent() : NotFound();
        }

        [HttpDelete("/api/niveles/{nivel}")]
        [SwaggerOperation("BorrarNivel")]
        public IActionResult BorrarNivel([FromRoute] int nivel)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("DELETE FROM niveles WHERE nivel = @nivel", connection);
            cmd.Parameters.AddWithValue("@nivel", nivel);
            int rows = cmd.ExecuteNonQuery();

            connection.Close();
            return rows > 0 ? NoContent() : NotFound();
        }

        [HttpDelete("/api/salas/{codigoSala}")]
        [SwaggerOperation("BorrarSala")]
        public IActionResult BorrarSala([FromRoute] int codigoSala)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("DELETE FROM salas WHERE codigoSala = @codigoSala", connection);
            cmd.Parameters.AddWithValue("@codigoSala", codigoSala);
            int rows = cmd.ExecuteNonQuery();

            connection.Close();
            return rows > 0 ? NoContent() : NotFound();
        }

        [HttpGet("/api/dispositivos/{codigo}")]
        [SwaggerOperation("ConsultarDispositivo")]
        public IActionResult ConsultarDispositivo([FromRoute] int codigo)
        {
            try
            {
                using var connection = new MySqlConnection(connectionString);
                connection.Open();

                using var cmd = new MySqlCommand("SELECT Codigo, descripcion FROM dispositivo WHERE Codigo = @codigo", connection);
                cmd.Parameters.AddWithValue("@codigo", codigo);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    var dispositivo = new
                    {
                        Codigo = reader.IsDBNull(0) ? 0 : reader.GetInt32(0),
                        Nombre = reader.IsDBNull(1) ? "N/A" : reader.GetString(1)
                    };

                    return Ok(dispositivo);
                }
                return NotFound(new { mensaje = "Dispositivo no encontrado" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { error = "Error interno del servidor", detalle = ex.Message });
            }
        }

        [HttpGet("/api/niveles/{nivel}")]
        [SwaggerOperation("ConsultarNivel")]
        public IActionResult ConsultarNivel([FromRoute] int nivel)
        {
            try
            {
                using var connection = new MySqlConnection(connectionString);
                connection.Open();

                using var cmd = new MySqlCommand("SELECT nivel, descripcion FROM niveles WHERE nivel = @nivel", connection);
                cmd.Parameters.AddWithValue("@nivel", nivel);

                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    var nivelData = new
                    {
                        Nivel = reader.GetInt32(reader.GetOrdinal("nivel")), // Accede por nombre de columna
                        Descripcion = reader.IsDBNull(reader.GetOrdinal("descripcion"))
                                      ? "N/A"
                                      : reader.GetString(reader.GetOrdinal("descripcion"))
                    };

                    return Ok(nivelData);
                }

                return NotFound(new { mensaje = "Nivel no encontrado" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { error = "Error interno del servidor", detalle = ex.Message });
            }
        }


        [HttpGet("/api/salas/{codigoSala}")]
        [SwaggerOperation("ConsultarSala")]
        public IActionResult ConsultarSala([FromRoute] int codigoSala)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            using var cmd = new MySqlCommand("SELECT codigoSala, nombre FROM salas WHERE codigoSala = @codigoSala", connection);
            cmd.Parameters.AddWithValue("@codigoSala", codigoSala);

            using var reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                var sala = new
                {
                    Codigo = reader.GetInt32(0),  // codigoSala (int)
                    Nombre = reader.IsDBNull(1) ? "Sin nombre" : reader.GetString(1) // nombre (varchar)
                };

                return Ok(sala);
            }

            return NotFound(new { mensaje = "Sala no encontrada" });
        }


        [HttpPost("/api/dispositivos")]
        [SwaggerOperation("CrearDispositivo")]
        public IActionResult CrearDispositivo([FromBody] Dispositivo dispositivo)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("INSERT INTO dispositivo (Codigo, Descripcion) VALUES (@codigo, @descripcion)", connection);
            cmd.Parameters.AddWithValue("@codigo", dispositivo.Codigo);
            cmd.Parameters.AddWithValue("@descripcion", dispositivo.Descripcion);
            cmd.ExecuteNonQuery();

            connection.Close();
            return CreatedAtAction(nameof(ConsultarDispositivo), new { codigo = dispositivo.Codigo }, dispositivo);
        }

        [HttpPost("/api/niveles")]
        [SwaggerOperation("CrearNivel")]
        public IActionResult CrearNivel([FromBody] Nivel nivel)
        {
            if (nivel == null)
            {
                return BadRequest(new { error = "El objeto nivel es nulo" });
            }
            if (nivel.nivel == 0)
            {
                return BadRequest(new { error = "El campo 'Nivel' no puede ser 0 o nulo" });
            }

            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("INSERT INTO niveles (nivel, Descripcion) VALUES (@nivel, @descripcion)", connection);
            cmd.Parameters.AddWithValue("@nivel", nivel.nivel);
            cmd.Parameters.AddWithValue("@descripcion", nivel.Descripcion);
            cmd.ExecuteNonQuery();

            connection.Close();
            return CreatedAtAction(nameof(ConsultarNivel), new { nivel = nivel.nivel }, nivel);
        }


        [HttpPost("/api/salas")]
        [SwaggerOperation("CrearSala")]
        public IActionResult CrearSala([FromBody] Sala sala)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("INSERT INTO salas (codigoSala, nombre, nivel) VALUES (@codigoSala, @nombre, @nivel)", connection);
            cmd.Parameters.AddWithValue("@codigoSala", sala.CodigoSala);
            cmd.Parameters.AddWithValue("@nombre", sala.Nombre);
            cmd.Parameters.AddWithValue("@nivel", sala.Nivel);
            cmd.ExecuteNonQuery();

            connection.Close();
            return CreatedAtAction(nameof(ConsultarSala), new { codigoSala = sala.CodigoSala }, sala);
        }

        [HttpPut("/api/dispositivos/{codigo}")]
        [SwaggerOperation("ModificarDispositivo")]
        public IActionResult ModificarDispositivo(int codigo, [FromBody] Dispositivo dispositivo)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("UPDATE dispositivo SET descripcion = @descripcion WHERE Codigo = @codigo", connection);
            cmd.Parameters.AddWithValue("@descripcion", dispositivo.Descripcion);
            cmd.Parameters.AddWithValue("@codigo", codigo);
            int rows = cmd.ExecuteNonQuery();

            connection.Close();
            return rows > 0 ? Ok(dispositivo) : NotFound();
        }


        [HttpPut("/api/niveles/{nivel}")]
        [SwaggerOperation("ModificarNivel")]
        public IActionResult ModificarNivel([FromRoute] int nivel, [FromBody] Nivel nivelData)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();
            using var cmd = new MySqlCommand("UPDATE niveles SET descripcion = @descripcion WHERE nivel = @nivel", connection);
            cmd.Parameters.AddWithValue("@descripcion", nivelData.Descripcion);
            cmd.Parameters.AddWithValue("@nivel", nivel); // Aqu√≠ ahora es solo el int nivel
            int rows = cmd.ExecuteNonQuery();

            connection.Close();
            return rows > 0 ? Ok(nivelData) : NotFound();
        }


        [HttpPut("/api/salas/{codigoSala}")]
        [SwaggerOperation("ModificarSala")]
        public IActionResult ModificarSala([FromBody] Sala sala, [FromRoute] int codigoSala)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            using var cmd = new MySqlCommand("UPDATE salas SET nombre = @nombre, nivel = @nivel WHERE CodigoSala = @codigoSala", connection);
            cmd.Parameters.AddWithValue("@nombre", sala.Nombre);
            cmd.Parameters.AddWithValue("@nivel", sala.Nivel);
            cmd.Parameters.AddWithValue("@codigoSala", codigoSala);
            int rows = cmd.ExecuteNonQuery();

            connection.Close();
            return rows > 0 ? Ok(sala) : NotFound();
        }

        private void EnviarCorreo(string emailDestino, string asunto, string cuerpo)
        {
            try
            {
                var mensaje = new MailMessage("tucorreo@dominio.com", emailDestino, asunto, cuerpo);
                var cliente = new SmtpClient("localhost") // Usar localhost si el fakeSMTP est√° corriendo localmente
                {
                    EnableSsl = false,    // No usar SSL/TLS
                    Port = 25             // Puerto sin SSL/TLS, el puerto de fakeSMTP
                };

                // No se proporciona autenticaci√≥n, ya que fakeSMTP no la requiere
                cliente.Send(mensaje);
            }
            catch (Exception ex)
            {
                // Manejo de errores
                Console.WriteLine($"Error al enviar correo: {ex.Message}");
            }
        }


        [HttpPost]
        [Route("/api/notificaciones/error")]
        [ValidateModelState]
        [SwaggerOperation("NotificarError")]
        public IActionResult NotificarError([FromBody] NotificacionesErrorBody body)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            // Obtener el email del empleado usando el NIF
            string query = "SELECT email, nombreApellidos FROM empleados WHERE nifnie = @nifnie";

            using var cmd = new MySqlCommand(query, connection);
            cmd.Parameters.AddWithValue("@nifnie", body.Nif);

            using var reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                var email = reader["email"].ToString();
                var nombre = reader["nombreApellidos"].ToString();

                EnviarCorreo(email, "Notificaci√≥n de Error", $"Estimado {nombre}, se ha producido un error: {body.Error}");
                connection.Close();
                return Ok("Notificaci√≥n enviada con √©xito");
            }

            connection.Close();
            return NotFound("Empleado no encontrado");
        }


        [HttpPost]
        [Route("/api/notificaciones/presencia")]
        [ValidateModelState]
        [SwaggerOperation("NotificarPresenciaSala")]
        public IActionResult NotificarPresenciaSala([FromBody] NotificacionPresencia body)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            // Obtener los empleados presentes en la sala
            string query = @"
        SELECT e.email, s.nombre AS sala_nombre
        FROM controlpresencia cp
        JOIN empleados e ON cp.idEmpleado = e.id
        JOIN salas s ON cp.idSala = s.id
        WHERE cp.idSala = @codigoSala";

            using var cmd = new MySqlCommand(query, connection);
            cmd.Parameters.AddWithValue("@codigoSala", body.CodigoSala);

            using var reader = cmd.ExecuteReader();
            var empleados = new List<string>();
            while (reader.Read())
            {
                var email = reader["email"].ToString();
                var salaNombre = reader["sala_nombre"].ToString();
                empleados.Add(email);
            }

            connection.Close();

            if (empleados.Count == 0)
            {
                return NotFound("No se encontraron empleados presentes en la sala.");
            }

            int correosEnviados = 0; // Variable para contar los correos enviados

            // Enviar el correo a cada empleado
            foreach (var email in empleados)
            {
                EnviarCorreo(email, "Presencia en Sala", $"Usted est√° presente en la sala: {body.CodigoSala}");
                correosEnviados++; // Incrementar el contador de correos enviados
            }

            return Ok($"Notificaci√≥n enviada con √©xito. Se enviaron {correosEnviados} correos.");
        }



        [HttpPost]
        [Route("/api/notificaciones/usuario-valido")]
        [ValidateModelState]
        [SwaggerOperation("NotificarUsuarioValido")]
        public IActionResult NotificarUsuarioValido([FromBody] NotificacionesUsuariovalidoBody body)
        {
            using var connection = new MySqlConnection(connectionString);
            connection.Open();

            // Verificar si el empleado existe y es v√°lido
            string query = "SELECT email, valido, nombreApellidos FROM empleados WHERE nifnie = @nifnie";

            using var cmd = new MySqlCommand(query, connection);
            cmd.Parameters.AddWithValue("@nifnie", body.Nif);

            using var reader = cmd.ExecuteReader();
            if (reader.Read())
            {
                var email = reader["email"].ToString();
                var nombre = reader["nombreApellidos"].ToString();
                var valido = Convert.ToInt32(reader["valido"]);

                // Si el usuario es v√°lido (valido == 1), enviar el correo
                if (valido == 1)
                {
                    EnviarCorreo(email, "Usuario V√°lido", $"Estimado {nombre}, usted es un usuario v√°lido.");
                    connection.Close();
                    return Ok("Notificaci√≥n enviada con √©xito");
                }
                else
                {
                    connection.Close();
                    return BadRequest("El usuario no es v√°lido.");
                }
            }

            connection.Close();
            return NotFound("Empleado no encontrado.");
        }


    }
}
